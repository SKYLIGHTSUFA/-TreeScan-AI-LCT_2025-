# bot.py
import io
import os
import gc
import time
import asyncio
import logging
from collections import defaultdict
from PIL import Image, UnidentifiedImageError
from video_utils import load_video_frames
import tempfile

from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from model_utils import load_model_and_tokenizer
from analysis_utils import get_detailed_analysis
from image_utils import get_gps_from_exif

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MAX_IMAGE_BYTES = 8 * 1024 * 1024  # 8 MB
MAX_PIXELS = 25_000_000  # ~25 MP
RATE_LIMIT_SEC = 20  # –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ 20 —Å–µ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

TOKEN = "8377634357:AAFhH06kmT6_8AKPCadKFlx8Jd63gbK4xcA"
if not TOKEN:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ‚îÄ‚îÄ –ú–æ–¥–µ–ª—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
model_cache = {}


def get_model():
    if not model_cache:
        model, tokenizer, device, torch_dtype = load_model_and_tokenizer()
        model_cache.update(
            {
                "model": model,
                "tokenizer": tokenizer,
                "device": device,
                "torch_dtype": torch_dtype,
            }
        )
    return (
        model_cache["model"],
        model_cache["tokenizer"],
        model_cache["device"],
        model_cache["torch_dtype"],
    )


# ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
last_request_time = defaultdict(float)  # user_id -> timestamp
user_busy = set()  # –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ –∞–Ω–∞–ª–∏–∑–µ


async def handle_video(
    update: Update, context: ContextTypes.DEFAULT_TYPE, video_bytes: bytes
):
    chat_id = update.effective_chat.id
    start = time.monotonic()

    progress = await update.message.reply_text(
        "üé¨ –í—ã–ø–æ–ª–Ω—è—é –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ‚Ä¶", reply_to_message_id=update.message.message_id
    )
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix=".mp4") as tmp:
        tmp.write(video_bytes)
        tmp.flush()
        model, tokenizer, device, torch_dtype = get_model()
        try:
            pixel_values, num_patches_list = load_video_frames(
                tmp.name, device=device, dtype=torch_dtype
            )
        except Exception:
            await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. 63")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏
    video_prefix = "".join(
        [f"Frame{i+1}: <image>\n" for i in range(len(num_patches_list))]
    )
    question = (
        video_prefix
        + """
–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: –û—Ü–µ–Ω–∏ –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10. 
–§–æ—Ä–º–∞—Ç: '–ó–¥–æ—Ä–æ–≤—å–µ: N –±–∞–ª–ª–æ–≤ –∏–∑ 10'.

–í–∏–¥ –∏ –ø–æ—Ä–æ–¥–∞: –û–ø—Ä–µ–¥–µ–ª–∏ –≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. 
–í–µ—Ä–Ω–∏ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞: 
'–ë–µ—Ä—ë–∑–∞, –ö–ª–µ–Ω, –î—É–±, –ö–µ–¥—Ä, –ò–≤–∞, –¢–æ–ø–æ–ª—å, –°–æ—Å–Ω–∞, –ï–ª—å, –¢—É—è, –†—è–±–∏–Ω–∞, –ö–∞—à—Ç–∞–Ω, –û—Å–∏–Ω–∞, –õ–∏–ø–∞, –Ø—Å–µ–Ω—å, —Ñ—Ä—É–∫—Ç–æ–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è'. 
–ï—Å–ª–∏ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫ ‚Äì –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤. 
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: '–í–∏–¥ –∏ –ø–æ—Ä–æ–¥–∞: <–æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ>. –¢–∏–ø: –¥–µ—Ä–µ–≤–æ/–∫—É—Å—Ç–∞—Ä–Ω–∏–∫/–ø–µ–Ω—å.'

–ü—Ä–æ—Ü–µ–Ω—Ç —Å—É—Ö–∏—Ö –≤–µ—Ç–≤–µ–π: –û—Ü–µ–Ω–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—É—Ö–∏—Ö –≤–µ—Ç–≤–µ–π –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç: 
0-25%, 25-50%, 50-75%, –∏–ª–∏ 75-100%. 
–§–æ—Ä–º–∞—Ç: '–°—É—Ö–∏–µ –≤–µ—Ç–≤–∏: <–≤–∞—Ä–∏–∞–Ω—Ç>'.

–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞: –û—Ü–µ–Ω–∏ —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –¥–µ—Ä–µ–≤–∞. –§–æ—Ä–º–∞—Ç: '–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞: N –≥—Ä–∞–¥—É—Å–æ–≤'.

–ü–µ—Ä–µ—á–∏—Å–ª–∏ –≤–∏–¥–∏–º—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã: —Ç—Ä–µ—â–∏–Ω—ã, –¥—É–ø–ª–∞, —Å–ª–æ–º–∞–Ω–Ω—ã–µ –≤–µ—Ç–≤–∏, "
            "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, –æ—Ç—Å–ª–æ–µ–Ω–∏–µ –∫–æ—Ä—ã –∏ —Ç.–¥. "
            "–ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: '–î–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'."
"""
    )

    loop = asyncio.get_running_loop()
    try:
        response = await loop.run_in_executor(
            None,
            lambda: model.chat(
                tokenizer,
                pixel_values,
                question,
                dict(max_new_tokens=350, do_sample=False),
                num_patches_list=num_patches_list,
            ),
        )
    except Exception:
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ.")
        return

    duration = time.monotonic() - start
    out_text = f"<b>üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ</b>\n\n{response}\n\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥."
    await progress.edit_text(out_text, parse_mode="HTML")


# ‚îÄ‚îÄ –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def analyze_one_photo(
    update: Update, context: ContextTypes.DEFAULT_TYPE, img_bytes: bytes
):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–∞–π—Ç—ã)."""
    chat_id = update.effective_chat.id
    start = time.monotonic()

    # –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if len(img_bytes) > MAX_IMAGE_BYTES:
        await update.message.reply_text(
            "‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 8 MB).",
            reply_to_message_id=update.message.message_id,
        )
        return

    try:
        pil_img = Image.open(io.BytesIO(img_bytes))
        pil_img.verify()
    except UnidentifiedImageError:
        await update.message.reply_text(
            "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
            reply_to_message_id=update.message.message_id,
        )
        return

    pil_img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    if pil_img.width * pil_img.height > MAX_PIXELS:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.",
            reply_to_message_id=update.message.message_id,
        )
        return

    gps = None
    try:
        gps = get_gps_from_exif(io.BytesIO(img_bytes))
    except Exception:
        pass

    # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress = await update.message.reply_text(
        "üîé –í—ã–ø–æ–ª–Ω—è—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑‚Ä¶", reply_to_message_id=update.message.message_id
    )
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    # —É–±–∏—Ä–∞–µ–º EXIF
    buf = io.BytesIO()
    pil_img.save(buf, format="JPEG")
    buf.seek(0)
    img_for_model = Image.open(buf).convert("RGB")

    model, tokenizer, device, torch_dtype = get_model()

    loop = asyncio.get_running_loop()
    try:
        results = await loop.run_in_executor(
            None,
            lambda: get_detailed_analysis(
                img_for_model,
                model,
                tokenizer,
                device,
                torch_dtype,
                tree_description="",
            ),
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
        await progress.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    out_lines = ["<b>üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>", ""]

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for k, v in results.items():
        if k == "–ì–ª–∞–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ":
            continue
        if k == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ":
            continue  # –æ—Ç–ª–æ–∂–∏–º –¥–æ –∫–æ–Ω—Ü–∞
        out_lines.append(f"<b>{k}:</b> {v}")

    # –î–æ–±–∞–≤–ª—è–µ–º GPS, –µ—Å–ª–∏ –µ—Å—Ç—å
    if gps:
        lat, lon = gps.get("latitude"), gps.get("longitude")
        if lat and lon:
            out_lines.append("")
            out_lines.append(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}")
            out_lines.append(f"https://maps.google.com/?q={lat},{lon}")

    # –î–æ–±–∞–≤–ª—è–µ–º –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    extra_desc = results.get("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "")
    if extra_desc:
        out_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥
        out_lines.append(f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {extra_desc}")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    duration = time.monotonic() - start
    out_lines.append("")
    out_lines.append(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await progress.edit_text("\n".join(out_lines), parse_mode="HTML")


async def handle_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –≤–∏–¥–µ–æ.
    –ï—Å–ª–∏ —Ñ–æ—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º media_group_id.
    """
    user_id = update.effective_user.id
    now = time.monotonic()

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---
    if now - last_request_time[user_id] < RATE_LIMIT_SEC:
        await update.message.reply_text(
            f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {RATE_LIMIT_SEC} —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.",
            reply_to_message_id=update.message.message_id,
        )
        return

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ ---
    if user_id in user_busy:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_to_message_id=update.message.message_id,
        )
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ---
    if update.message.video:
        user_busy.add(user_id)
        last_request_time[user_id] = now
        try:
            if update.message.video.file_size > 20 * 1024 * 1024:  # 20 MB
                await update.message.reply_text(
                    "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 20 MB). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–µ–∑–∞—Ç—å –∏–ª–∏ —Å–∂–∞—Ç—å –µ–≥–æ.",
                    reply_to_message_id=update.message.message_id,
                )
                return
            file = await update.message.video.get_file()
            video_bytes = await file.download_as_bytearray()
            await handle_video(update, context, bytes(video_bytes))
        finally:
            user_busy.discard(user_id)
        return

    # === –°–±–æ—Ä —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞ ===
    group_id = update.message.media_group_id
    if group_id:
        context.chat_data.setdefault(group_id, []).append(update.message)

        await asyncio.sleep(1.0)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ
        if group_id not in context.chat_data:
            return  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏

        msgs = sorted(context.chat_data.pop(group_id), key=lambda m: m.date)
        user_busy.add(user_id)
        last_request_time[user_id] = now
        try:
            for m in msgs:
                file = await m.photo[-1].get_file()
                img_bytes = await file.download_as_bytearray()
                await analyze_one_photo(m, context, bytes(img_bytes))
        finally:
            user_busy.discard(user_id)
        return

    # === –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ===
    user_busy.add(user_id)
    last_request_time[user_id] = now
    try:
        file = await update.message.photo[-1].get_file()
        img_bytes = await file.download_as_bytearray()
        await analyze_one_photo(update, context, bytes(img_bytes))
    finally:
        user_busy.discard(user_id)


async def album_collector(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ—Ç–¥–∞—Ç—å –≤—Å–µ —Ä–∞–∑–æ–º."""
    if not context.chat_data:
        context.chat_data.clear()
    gid = update.message.media_group_id
    if gid:
        context.chat_data.setdefault(gid, []).append(update.message)
    # —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ handle_images (–æ–Ω–æ –∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ)


# –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ
async def handle_not_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –∂–¥—É —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üì∑", reply_to_message_id=update.message.message_id
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –∞–ª—å–±–æ–º), –∏ —è –≤—ã–ø–æ–ª–Ω—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.",
        reply_to_message_id=update.message.message_id,
    )


async def clear_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    model_cache.clear()
    try:
        import torch

        torch.cuda.empty_cache()
    except Exception:
        pass
    gc.collect()
    await update.message.reply_text(
        "–ö—ç—à –º–æ–¥–µ–ª–∏ –æ—á–∏—â–µ–Ω.", reply_to_message_id=update.message.message_id
    )


# ‚îÄ‚îÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("clear_cache", clear_cache))

    # –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ò –∞–ª—å–±–æ–º—ã ‚Äî –≤—Å—ë –ª–æ–≤–∏—Ç —ç—Ç–æ—Ç –æ–¥–∏–Ω —Ö—ç–Ω–¥–ª–µ—Ä
    app.add_handler(MessageHandler(filters.PHOTO, handle_images))

    # –≤–∏–¥–µ–æ
    app.add_handler(MessageHandler(filters.VIDEO, handle_images))

    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    app.add_handler(
        MessageHandler(
            ~filters.PHOTO & ~filters.VIDEO & ~filters.COMMAND, handle_not_photo
        )
    )

    app.run_polling()


if __name__ == "__main__":
    main()
